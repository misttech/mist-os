// Copyright 2024 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library fuchsia.hardware.test;

using zx;

@serializable
type Metadata = table {
    1: test_property string:MAX;
};

closed protocol MetadataSender {
    /// Use `ddk::MetadataServer::SetMetadata()` to serve |metadata| to the driver's child devices.
    strict SetMetadata(struct {
        metadata Metadata;
    }) -> () error zx.Status;

    /// Add a child device that the metadata_retriever driver can bind to.
    strict AddMetadataRetrieverDevice(struct {
        /// Whether or not the parent driver will exposes metadata to the new child device.
        expose_metadata bool;
    }) -> (struct {
        /// Name of the child device that the metadata_retriever driver can bind to.
        child_device_name string:MAX;
    }) error zx.Status;

    /// Add a child device that the metadata_forwarder driver can bind to. The parent driver will
    /// expose its metadata to this child device.
    strict AddMetadataForwarderDevice() -> (struct {
        /// Name of the child device that the metadata_forwarder driver can bind to.
        child_device_name string:MAX;
    }) error zx.Status;
};

closed protocol MetadataForwarder {
    /// Use `ddk::MetadataServer::ForwardMetadata()` to forward metadata from the driver's parent
    ///driver to its child devices.
    strict ForwardMetadata() -> () error zx.Status;
};

closed protocol MetadataRetriever {
    /// Use `ddk::GetMetadata()` to retrieve metadata from its parent driver and return it.
    strict GetMetadata() -> (struct {
        metadata Metadata;
    }) error zx.Status;

    /// Use `ddk::GetMetadataIfExists()` to retrieve metadata from its parent driver and return it.
    strict GetMetadataIfExists() -> (struct {
        metadata Metadata;

        /// False if `fdf_metadata::GetMetadataIfExists()` returned a std::nullopt.
        retrieved_metadata bool;
    }) error zx.Status;
};
